#! /bin/bash

# Exit out if any process returns a non zero return code
#set -e
#set -x

# Enable debugging if SAS_DEBUG is set
[[ -z ${SAS_DEBUG+x} ]] && export SAS_DEBUG=0
if [ ${SAS_DEBUG} -gt 0 ]; then
    set -x
fi

# if given a command, run that
if [[ -n "$1" ]]; then
    exec "$@"
fi

if [ ! -z "${SAS_SLEEP}" ]; then
    while true; do
      sleep 9
    done
fi

###############################################################################
# Variables
###############################################################################

[[ -z ${DEPLOYMENT_NAME+x} ]]   && export DEPLOYMENT_NAME="viya"
[[ -z ${SASSERVICENAME+x} ]]    && export SASSERVICENAME="postgres"
#[[ -z ${SASSERVICENAME+x} ]]    && export SASSERVICENAME="sas-postgres"
[[ -z ${SASSERVICECONTEXT+x} ]] && export SASSERVICECONTEXT=${SASSERVICENAME#sas-}
[[ -z ${SASROOT+x} ]]           && export SASROOT=/opt/sas
[[ -z ${SASDEPLOYID+x} ]]       && export SASDEPLOYID=viya
# SASINSTANCE is figured out below, however we need to set it to empty for the Consul piece to work.
[[ -z ${SASINSTANCE+x} ]]       && export SASINSTANCE=''
[[ -z ${SASHOME+x} ]]           && export SASHOME=${SASROOT}/${SASDEPLOYID}/home
[[ -z ${SASCONFIG+x} ]]         && export SASCONFIG=${SASROOT}/${SASDEPLOYID}/config
[[ -z ${SASTOKENDIR+x} ]]       && export SASTOKENDIR=${SASCONFIG}/etc/SASSecurityCertificateFramework/tokens/consul/default
[[ -z ${SAS_CURRENT_HOST+x} ]]  && export SAS_CURRENT_HOST=$(hostname -f)

# The following are used in sas-start-functions
servicename=${SASSERVICENAME}
servicecontext=${SASSERVICECONTEXT}

# Set of functions for supporting docker containers
source ${SASHOME}/lib/envesntl/docker-functions


###############################################################################
# Save environment variables
###############################################################################
save_env sas SASHOME
save_env sas SASCONFIG
save_env sas SASTOKENDIR
save_env sas SASSERVICENAME

###############################################################################
# Setup Consul
###############################################################################

# Write tokens to disk if needed and echo CONSUL_HTTP_ADDR to file
docker_define_consul_environment

# start local consul
#/etc/init.d/sas-viya-consul-default start
docker_run_local_consul

# Wait for Consul to be up
#docker_wait_for_consul_leader

###############################################################################
# Shutdown
###############################################################################

trap docker_shutdown_sas_services SIGTERM
trap docker_shutdown_sas_services SIGINT

###############################################################################
# Run postgres
###############################################################################

# Setup logging so information goes to stdout
[[ -z ${SASLOGDIR+x} ]] && export SASLOGDIR=""
[[ -z ${SAS_DATASERVER_CONF_COMMON_WHERETOLOG_LOGGING_COLLECTOR+x} ]] && export SAS_DATASERVER_CONF_COMMON_WHERETOLOG_LOGGING_COLLECTOR="off"
[[ -z ${SAS_DATASERVER_CONF_COMMON_WHERETOLOG_LOG_DIRECTORY+x} ]]     && export SAS_DATASERVER_CONF_COMMON_WHERETOLOG_LOG_DIRECTORY=""

# See if we are a Kubernetes environment
set +e
_k8senvcount=$(env | grep -c KUBERNETES)
set -e

[[ -z ${LD_LIBRARY_PATH+x} ]] && export LD_LIBRARY_PATH=${POSTGRESHOME}/lib64
[[ -z ${DATABASE_CLUSTER_NAME+x} ]] && export DATABASE_CLUSTER_NAME="postgres"
[[ -z ${SASPOSTGRESDBSIZE+x} ]]     && export SASPOSTGRESDBSIZE="large"
[[ -z ${PG_VOLUME+x} ]]             && export PG_VOLUME="/database/data"
#[[ -z ${PG_VOLUME+x} ]]             && export PG_VOLUME="${SASCONFIG}/data/${SASSERVICECONTEXT}/${DATABASE_CLUSTER_NAME}"

# The location of postgres files changed in 19w47
# Default to the pre-19w47 location
export POSTGRESHOME=${SASHOME}
if [ ! -f ${SASHOME}/bin/pg_ctl ]; then
    # Use the 19w47+ location
    export POSTGRESHOME=${SASROOT}/${SASDEPLOYID}/home/postgresql11
fi

if [ ${_k8senvcount} -ne 0 ]; then
    _sasuuid=${PG_VOLUME}/${SAS_CURRENT_HOST}_sas_${SASDEPLOYID}_${SASSERVICECONTEXT}_uuid
    # Since we are in a Kubernetes enviroment, use the host name as the UUID as
    # this will stay the same across restarts
    echo "export SASINSTANCE=$(echo ${SAS_CURRENT_HOST} | sed 's/\-//g')" > ${_sasuuid}

else
    _sasuuid=${PG_VOLUME}/sas_${SASDEPLOYID}_${SASSERVICECONTEXT}_uuid
fi

if [ ! -d ${PG_VOLUME} ]; then
    echo "Creating ${PG_VOLUME}"
    mkdir -vp ${PG_VOLUME}
    chown -vR sas:sas "$(dirname "${PG_VOLUME}")"
fi

if [ -e ${_sasuuid} ]; then
    echo "Sourcing ${_sasuuid} for the instance value"
    source ${_sasuuid}
else
    echo "Generating uuid to define instance value"
    if [[ -z ${SASINSTANCE+x} ]] || [ "${SASINSTANCE}" = "" ]; then
        export SASINSTANCE=$(uuidgen | sed 's/\-//g')
    fi

    echo "Save the instance value (${SASINSTANCE}) off to be used on restart"
    echo "export SASINSTANCE=${SASINSTANCE}" > ${_sasuuid}
fi

unset SASINSTANCE
export SASINSTANCE="default"

# Opening up permissions to support writing pid file as the postgres user.
# chmod -v 0757 /var/run/sas/

#FIXME: Removing backup-agent for now
if [[ -f /etc/init.d/sas-viya-backup-agent-default ]]; then
    rm -v /etc/init.d/sas-viya-backup-agent-default
fi

# Start and continually check the ops-agent process.
${SASHOME}/lib/envesntl/docker-ops-agent &

echo "Starting SAS Services..."
docker_run_sas_services

# The following matches what the init.d script will create and pass to sas-pgpool
export DOCKERPIDFILE=/var/run/sas/sas-viya-sasdatasvrc-default.pid

###############################################################################
# Keep the container alive until it is killed
###############################################################################
docker_check_process
