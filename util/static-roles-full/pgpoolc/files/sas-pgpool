#!/bin/bash

set -e
# set -x

###############################################################################
# Variables
###############################################################################

# Take in a name of a password variable and then see if that variable is set.
# If the password is not set return an error
function is_password_empty() {
    passwd_to_test=$1
    # Expand the variable in a variable
    # https://stackoverflow.com/questions/14049057/bash-expand-variable-in-a-variable
    if [[ -z ${!passwd_to_test+x} ]]; then
        echo "[ERROR] : Value for '${passwd_to_test}' was not provided...exiting"
        exit 1
    fi
}

[[ -z ${SASDEPLOYID+x} ]]      && export SASDEPLOYID=viya
[[ -z ${SASHOME+x} ]]          && export SASHOME=/opt/sas/viya/home
[[ -z ${SASCONFIG+x} ]]        && export SASCONFIG=/opt/sas/${SASDEPLOYID}/config
[[ -z ${SASSERVICENAME+x} ]]   && export SASSERVICENAME="postgres"
[[ -z ${SASINSTANCE+x} ]]      && export SASINSTANCE=pgpool0
[[ -z ${PG_VOLUME+x} ]]        && export PG_VOLUME="${SASCONFIG}/data/sasdatasvrc/${SASSERVICENAME}"
[[ -z ${SAS_CURRENT_HOST+x} ]] && export SAS_CURRENT_HOST=$(hostname -f)

# This is being defined in support of Vault tokens. Used in docker-functions
# docker-functions just needs to find the value. To preserve functionality before
# this change, we will capture whatever the value was prior and then reset it post.
# This is an area where improvement can be made.
tmp_servicecontext=$servicecontext
servicecontext=pgpoolc
servicecontext=$tmp_servicecontext

excessargs=()

while [ -n "$1" ]
do
  case "$1" in
    -p)
      shift
      SASPGPOOLPIDFILE="$1"
      ;;

    -d)
      shift
      SASDEPLOYID="$1"
      ;;

     *)
# if we don't recognize argument as expected opt, accumulate and let something else consume those
      excessargs+=("$1")
      ;;
  esac
  shift  # next value
done

source ${SASHOME}/lib/envesntl/docker-functions

# In the case of Docker, we need to load up what the instance value is.
# The instance was saved by the docker_entrypoint.sh so it can be used
# by multiple scripts
_sasuuidname=sas_${SASDEPLOYID}_${SASSERVICENAME}_uuid
_k8ssasuuid=${PG_VOLUME}/${SAS_CURRENT_HOST}_${_sasuuidname}
_sasuuid=${PG_VOLUME}/${_sasuuidname}

set -x
[[ -e ${_k8ssasuuid} ]] && source ${_k8ssasuuid}
[[ -e ${_sasuuid} ]] && source ${_sasuuid}
set +x

# Process any overrides if they exist
_sysconfig=${SASCONFIG}/etc/sasdatasvrc/${SASSERVICENAME}/${SASINSTANCE}/sas-${SASSERVICENAME}
[[ -e ${_sysconfig} ]] && source ${_sysconfig}

# set standard environment if not already set
[[ -z ${SASLOGROOT+x} ]]          && export SASLOGROOT="${SASCONFIG}/var/log"
[[ -z ${SASLOGDIR+x} ]]           && export SASLOGDIR="${SASLOGROOT}/sasdatasvrc/${SASSERVICENAME}"
[[ -z ${SASCONSULDIR+x} ]]        && export SASCONSULDIR="${SASHOME}"
[[ -z ${SASPGPOOLCONFIGDIR+x} ]]  && export SASPGPOOLCONFIGDIR="${SASCONFIG}/etc/sasdatasvrc/${SASSERVICENAME}/${SASINSTANCE}"
[[ -z ${SAS_DEFAULT_PGUSER+x} ]]  && export SAS_DEFAULT_PGUSER="dbmsowner"
is_password_empty SAS_DEFAULT_PGPWD
[[ -z ${SASPOSTGRESREPLICATION+x} ]] && export SASPOSTGRESREPLICATION=false
[[ -z ${SASPOSTGRESREPLUSER+x} ]] && export SASPOSTGRESREPLUSER="replication"
is_password_empty SASPOSTGRESREPLPWD
[[ -z ${SAS_PCPUSER+x} ]]         && export SAS_PCPUSER="dbmsowner"
[[ -z ${SAS_PCPPWD+x} ]]          && export SAS_PCPPWD="${SAS_DEFAULT_PGPWD}"
[[ -z ${SASPGPOOLOWNER+x} ]]      && export SASPGPOOLOWNER="sas"
[[ -z ${SASPGPOOLGROUP+x} ]]      && export SASPGPOOLGROUP="sas"
[[ -z ${SASPGPOOLOIDDIR+x} ]]     && export SASPGPOOLOIDDIR="${SASLOGDIR}/oiddir"
[[ -z ${SASPGPOOLRUNDIR+x} ]]     && export SASPGPOOLRUNDIR="${SASCONFIG}/var/run/sasdatasvrc"
[[ -z ${SASPGPOOLPIDFILE+x} ]]    && export SASPGPOOLPIDFILE="sas-${SASDEPLOYID}-${SASSERVICENAME}-${SASINSTANCE}.pid"
[[ -z ${SAS_DATAMINING_USER+x} ]] && export SAS_DATAMINING_USER="dataminingwarehouse"
is_password_empty SAS_DATAMINING_PASSWORD

save_env sas SASLOGROOT
save_env pgpool SASLOGDIR
save_env pgpool SASPGPOOLCONFIGDIR
save_env pgpool SAS_PCPUSER
save_env pgpool SASPGPOOLOWNER
save_env pgpool SASPGPOOLGROUP

PGPOOL_CONFIG_DEFN="sas.dataserver.pool"
PGPOOL_CONF_SECTIONS="CONNECTION,COMMUNICATIONMANAGER,BACKENDCONNECTION,SSLCONNECTION,POOLSIZE,LIFETIME,WHERETOLOG,WHATTOLOG,SYSLOG,DEBUG,FILELOCATIONS,CONNECTIONPOOLING,REPLICATION,LOADBALANCING,MASTERSLAVESETTINGS,MASTERSLAVESTREAMING,HEALTHCHECK,FAILOVER,RECOVERY,WATCHDOGENABLE,WATCHDOGCONNECTION,WATCHDOGCOMMUNICATION,WATCHDOGVIRTUALIP,WATCHDOGESCALATION,WATCHDOGLIFECHECK,WATCHDOGOTHER,OTHERS,INMEMORY"
PGPOOLHBA_CONFIG_DEFN="sas.dataserver.pool.hba"
PGPOOLHBA_CONF_SECTIONS=""
PGPOOLPCP_CONFIG_DEFN="sas.dataserver.pcp"
PGPOOLPCP_CONF_SECTIONS=""

# Define defaults for the pg_pool configuration
[[ -z ${SAS_DATASERVER_POOL_HBA_COMMON_HBA_01+x} ]] && export SAS_DATASERVER_POOL_HBA_COMMON_HBA_01="local   all         all                         trust                  # for Unix domain socket connections only"
[[ -z ${SAS_DATASERVER_POOL_HBA_COMMON_HBA_02+x} ]] && export SAS_DATASERVER_POOL_HBA_COMMON_HBA_02="sas-chosen    all         all         0.0.0.0/0       md5                  # for all IPv4 client connections"
[[ -z ${SAS_DATASERVER_POOL_HBA_COMMON_HBA_03+x} ]] && export SAS_DATASERVER_POOL_HBA_COMMON_HBA_03="sas-chosen    all         all         ::0/0           md5                 # for all IPv6 client connections"
[[ -z ${SAS_DATASERVER_POOL_COMMON_COMMUNICATIONMANAGER_PCP_PORT+x} ]] && export SAS_DATASERVER_POOL_COMMON_COMMUNICATIONMANAGER_PCP_PORT=9898
[[ -z ${SAS_DATASERVER_POOL_COMMON_CONNECTION_PORT+x} ]] && export SAS_DATASERVER_POOL_COMMON_CONNECTION_PORT=5431
[[ -z ${SAS_DATASERVER_POOL_COMMON_MASTERSLAVESTREAMING_SR_CHECK_USER+x} ]] && export SAS_DATASERVER_POOL_COMMON_MASTERSLAVESTREAMING_SR_CHECK_USER="${SAS_DEFAULT_PGUSER}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_MASTERSLAVESTREAMING_SR_CHECK_PASSWORD+x} ]] && export SAS_DATASERVER_POOL_COMMON_MASTERSLAVESTREAMING_SR_CHECK_PASSWORD="${SAS_DEFAULT_PGPWD}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_HEALTHCHECK_HEALTH_CHECK_USER+x} ]] && export SAS_DATASERVER_POOL_COMMON_HEALTHCHECK_HEALTH_CHECK_USER="${SAS_DEFAULT_PGUSER}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_HEALTHCHECK_HEALTH_CHECK_PASSWORD+x} ]] && export SAS_DATASERVER_POOL_COMMON_HEALTHCHECK_HEALTH_CHECK_PASSWORD="${SAS_DEFAULT_PGPWD}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_RECOVERY_RECOVERY_USER+x} ]] && export SAS_DATASERVER_POOL_COMMON_RECOVERY_RECOVERY_USER="${SAS_DEFAULT_PGUSER}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_RECOVERY_RECOVERY_PASSWORD+x} ]] && export SAS_DATASERVER_POOL_COMMON_RECOVERY_RECOVERY_USER="${SAS_DEFAULT_PGPWD}"
[[ -z ${SAS_DATASERVER_POOL_COMMON_WATCHDOGENABLE_USE_WATCHDOG+x} ]] && export SAS_DATASERVER_POOL_COMMON_WATCHDOGENABLE_USE_WATCHDOG=off
[[ -z ${SAS_DATASERVER_PCP_COMMON_PCP_01+x} ]] && export SAS_DATASERVER_PCP_COMMON_PCP_01="${SAS_PCPUSER}:$(${SASHOME}/bin/pg_md5 ${SAS_PCPPWD})"
[[ -z ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR+x} ]] && export SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR="${SASLOGROOT}/sasdatasvrc/${SASSERVICENAME}"

if [[ "${SECURE_CONSUL}" == "true" ]]; then
    [[ -z ${SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CERT+x} ]]        && export SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CERT="${SASCONFIG}/etc/SASSecurityCertificateFramework/tls/certs/sasdatasvrc/postgres/${SASINSTANCE}/sascert.pem"
    [[ -z ${SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_KEY+x} ]]         && export SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_KEY="${SASCONFIG}/etc/SASSecurityCertificateFramework/private/sasdatasvrc/postgres/${SASINSTANCE}/saskey.pem"
    [[ -z ${SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CA_CERT+x} ]]     && export SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CA_CERT="${SASCONFIG}/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem"
    [[ -z ${SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CA_CERT_DIR+x} ]] && export SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CA_CERT_DIR="${SASCONFIG}/etc/SASSecurityCertificateFramework/cacerts"
fi

_LOGFILENAME=${SASLOGDIR}/${SASSERVICENAME}_${SASINSTANCE}_start.log

###############################################################################
# Functions
###############################################################################

function init_log() {
    if [ ! -z "${SASLOGDIR}" ]; then
        if [ ! -d $(dirname ${_LOGFILENAME}) ]; then
            mkdir -vp $(dirname ${_LOGFILENAME})
            chmod -v 0777 $(dirname ${_LOGFILENAME})
            chown -v ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} $(dirname ${_LOGFILENAME})
        else
            if [ -e ${_LOGFILENAME} ]; then
                mv -v ${_LOGFILENAME} ${_LOGFILENAME}_$(date +"%Y%m%d%H%M")
            fi
        fi
    fi
}

function echo_line {
    line_out="$(date) - $1"
    if [ ! -z "${SASLOGDIR}" ]; then
        printf "%s\n" "$line_out" >>${_LOGFILENAME}
    else
        printf "%s\n" "$line_out"
    fi
}

function reset_file {
    resetname=$1
    fileuser=$2
    filegroup=$3
    fileperms=$4

    [[ -e ${resetname} ]] && rm ${resetname}
    touch ${resetname}
    chown -v ${fileuser}:${filegroup} ${resetname}
    chmod -v ${fileperms} ${resetname}
}

function add_bulk_consul_kv_pair {
    servicename=$1
    servicedefn=$2
    section=$3
    filename=$4
    section_header=false

    while IFS='=' read -r name value ; do
        if [[ $name == "${servicedefn}_${section}_"* ]]; then
            # We have a key, so add the section header unless we have already done so
            if [ "${section_header}" = "false" ]; then
                blankpadding="      "
                if [[ ${section} == *"_"* ]]; then
                    while IFS='_' read -ra SECTIONS ; do
                        for ymlsection in "${SECTIONS[@]}"; do
                            lower_yamlsection="${blankpadding}$(echo ${ymlsection} | awk '{print tolower($0)}')"
                            # look for section
                            set +e
                            _tmpresult=$(grep -c "${lower_yamlsection}" ${filename})
                            set -e
                            if [ $_tmpresult -eq 0 ]; then
                                echo >> ${filename} "${lower_yamlsection}:"
                            fi
                            blankpadding=${blankpadding}"  "
                        done
                    done <<< "${section}"
                else
                    echo >> ${filename} "${blankpadding}$(echo ${section} | awk '{print tolower($0)}'):"
                    blankpadding=${blankpadding}"  "
                fi
                section_header=true
            fi
            key=$(echo $name | sed "s/${servicedefn}_${section}_//")
            if [[ ${value} =~ ^[0-9]+$ ]]; then
                echo >> ${filename} "${blankpadding}$(echo $key | awk '{print tolower($0)}'): ${value}"
            else
                echo >> ${filename} "${blankpadding}$(echo $key | awk '{print tolower($0)}'): '${value}'"
            fi
        fi
    done < <(env|sort)
}

function create_and_load_bulk_consul_file {
    lower_srvcname=$(echo $1 | awk '{print tolower($0)}')
    lower_srvcdefn=$(echo $2 | awk '{print tolower($0)}')
    sectionlist=$3
    yamlfile=$4

    reset_file ${yamlfile} ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0755

    echo >> ${yamlfile} "config:"
    echo >> ${yamlfile} "  ${lower_srvcname}:"
    echo >> ${yamlfile} "    ${lower_srvcdefn}:"

    upper_srvcname=$(echo ${lower_srvcname} | awk '{print toupper($0)}')
    upper_srvcdefn=$(echo ${lower_srvcdefn//\./_} | awk '{print toupper($0)}')
    for instance in COMMON $(echo ${SASINSTANCE} | awk '{print toupper($0)}'); do
        if [ ! -z "${sectionlist}" ]; then
            while IFS=',' read -ra DEFNSECTIONS ; do
                for defnsection in "${DEFNSECTIONS[@]}"; do
                    add_bulk_consul_kv_pair ${upper_srvcname} ${upper_srvcdefn} ${instance}_${defnsection} ${yamlfile}
                done
            done <<< "${sectionlist}"
        else
            add_bulk_consul_kv_pair ${upper_srvcname} ${upper_srvcdefn} ${instance} ${yamlfile}
        fi
    done

    ${_bootstrap_config} kv bulkload --force --site-default --yaml ${yamlfile}
}

function add_range_to_ctmpl {
    srvcname=$(echo $1 | awk '{print tolower($0)}')
    srvcdefn=$(echo $2 | awk '{print tolower($0)}')
    sectionlist=$3
    ctmplfile=$4
    for instance in COMMON $(echo ${SASINSTANCE} | awk '{print toupper($0)}'); do
        while IFS=',' read -ra DEFNSECTIONS ; do
            for defnsection in "${DEFNSECTIONS[@]}"; do
                echo >>${ctmplfile} "{{ range tree \"config/${srvcname}/${srvcdefn}/$(echo ${instance} | awk '{print tolower($0)}')/$( echo ${defnsection} | awk '{print tolower($0)}')\" }}"
                echo >>${ctmplfile} "{{- if .Value | regexMatch \"^[0-9]+$\" }}"
                echo >>${ctmplfile} "{{ .Key }} = {{ .Value }}"
                echo >>${ctmplfile} "    {{- else -}}"
                echo >>${ctmplfile} "{{ .Key }} = '{{ .Value }}'"
                echo >>${ctmplfile} "    {{- end }}"
                echo >>${ctmplfile} "{{-  end }}"
            done
        done <<< "${sectionlist}"
    done
}

###############################################################################
# Create the log directory if needed and backup the previous log file
###############################################################################

init_log

###############################################################################
# Make sure Consul binaries are on the host and that we can connect to Consul
###############################################################################

if [ ! -d ${SASCONSULDIR} ]; then
    echo_line "[pgpool] Consul is not available on host...exiting"
    exit 1
fi

_bootstrap_config=${SASCONSULDIR}/bin/sas-bootstrap-config

_tmpinstance=${SASINSTANCE}
export SASINSTANCE=default

# Source the file which contains the Consul functions
source ${SASHOME}/lib/envesntl/sas-start-functions

# Setup service execution environment
sas_set_service_env

# Setup access to Consul and Vault
set +e
sas_set_consul_vault
set -e

# Make sure Consul is up
consul_status=$(${_bootstrap_config} status peers)
echo_line "[pgpool] Consul status peers: $consul_status"

if [ -z "$consul_status" ]; then
  echo_line "[pgpool] No consul peers available...exiting"
  exit 1;
fi

export SASINSTANCE=${_tmpinstance}

##############################################################################
# Generate the key and cert for TLS
##############################################################################

if [[ "${SECURE_CONSUL}" == "true" ]]; then
    #
    # Make the directories for the cert and key
    #
    mkdir -p $(dirname $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CERT)
    mkdir -p $(dirname $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_KEY)
    chown -R ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASCONFIG}/etc/SASSecurityCertificateFramework/tls/certs/sasdatasvrc
    chown -R ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASCONFIG}/etc/SASSecurityCertificateFramework/private/sasdatasvrc

    #
    # Use sas-bootstrap-config and its 'network addresses' command to obtain a string
    # consisting of a comma delimited list of IP addresses found on this machine.
    #
    CERT_IPADDRESS_LIST=$(${_bootstrap_config} network addresses | tr '[:space:]' ',' | sed 's/.$//' )

    #
    # Gather some info to be used in TLS cert generation.
    #
    CERT_HOSTNAME_PLAIN=$(hostname)
    CERT_HOSTNAME_FQDN=$(hostname -f)
    CERT_HOSTNAME_SHORT_NAME=$(hostname -s)

    #
    # Run sas-crypto-management to generate a new certificate file.
    #
    $SASHOME/SASSecurityCertificateFramework/bin/sas-crypto-management \
        req-vault-cert \
        --common-name $CERT_HOSTNAME_FQDN \
        --out-crt $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CERT \
        --out-key $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_KEY \
        --san-dns localhost \
        --san-dns $CERT_HOSTNAME_FQDN \
        --san-dns $CERT_HOSTNAME_PLAIN \
        --san-dns $CERT_HOSTNAME_SHORT_NAME \
        --san-ip 127.0.0.1 \
        --san-ip $CERT_IPADDRESS_LIST \
        --vault-token $SASCONFIG/etc/SASSecurityCertificateFramework/tokens/pgpoolc/default/vault.token \
        --vault-cafile $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CA_CERT

    chown ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_CERT
    chown ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} $SAS_DATASERVER_POOL_COMMON_SSLCONNECTION_SSL_KEY
fi

###############################################################################
# Register with haproxy
###############################################################################

if [ ! -z "${SASPGPOOLDELEGATEIP}" ]; then
    echo_line "[pgpool] Ensuring pgpool proxy with delegate ip ${SASPGPOOLDELEGATEIP}"
    ${_bootstrap_config} kv write --force config/application/haproxy/proxy/pgpool/${SASPGPOOLDELEGATEIP} ${SAS_DATASERVER_POOL_COMMON_CONNECTION_PORT}
else
    echo_line "[pgpool] No haproxy present"
fi

###############################################################################
# See if the primary host has been registered
###############################################################################

registered_primary_node=$(${_bootstrap_config} kv read config/application/sas/database/${SASSERVICENAME}/primary)
echo_line "[pgpool] Primary node registered in Consul: $registered_primary_node"

if [ -z ${registered_primary_node} ]; then
    while [ -z ${registered_primary_node} ]; do
        echo_line "[pgpool] Primary node is not defined...sleeping and looping until it is"
        sleep 30
        registered_primary_node=$(${_bootstrap_config} kv read config/application/sas/database/${SASSERVICENAME}/primary)
    done
fi

registered_primary_uid=$(${_bootstrap_config} kv read config/application/sas/database/${SASSERVICENAME}/primary_uid)

###############################################################################
# Wait for the primary to register as up
###############################################################################

echo_line "[pgpool] We are going to sleep and then exit in order to give the data nodes a chance to start first"
primary_status="down"
while [ "$primary_status" != "up" ]; do
    echo_line "[pgpool] Primary node status is $primary_status...sleeping and looping until it comes up"
    sleep 5
    primary_status=$(${_bootstrap_config} kv read config/${SASSERVICENAME}/sas.dataserver.pool/backend/${registered_primary_uid}/status)
done;

##############################################################################
# Initialize the configuration
##############################################################################

if [ ! -e ${PG_VOLUME}/sas-${SASDEPLOYID}-${SASSERVICENAME}.guid ]; then
    echo_line "[pgpool] Save the instance info off so it can be discovered by the caller and passed in on restart"
    echo_line "[pgpool] instance = ${SASINSTANCE}"
    echo "export SASINSTANCE=${SASINSTANCE}" > ${PG_VOLUME}/sas-${SASDEPLOYID}-${SASSERVICENAME}.guid
fi

if [ ! -d ${SASPGPOOLCONFIGDIR} ]; then
    echo_line "[pgpool] Create configuration directory"
    mkdir -vp ${SASPGPOOLCONFIGDIR}
    chmod -v 0777 ${SASPGPOOLCONFIGDIR}
    chown -v ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASPGPOOLCONFIGDIR}
fi

if [ ! -d ${SASPGPOOLRUNDIR} ]; then
    echo_line "[pgpool] Create root data directory: ${SASPGPOOLRUNDIR}"
    mkdir -vp ${SASPGPOOLRUNDIR}
    chmod -vR 0777 ${SASPGPOOLRUNDIR}
    chown -v ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASPGPOOLRUNDIR}
fi

if [ ! -d ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR} ]; then
    echo_line "[pgpool] Create dir for pgpool_status: ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR}"
    mkdir -vp ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR}
    chmod -vR 0777 ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR}
    chown -v ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SAS_DATASERVER_POOL_COMMON_FILELOCATIONS_LOGDIR}
fi

# Create directory if it does not exist
echo_line "[pgpool] Create the oiddir, ${SASPGPOOLOIDDIR}"
if [ ! -d ${SASPGPOOLOIDDIR} ]; then
    mkdir -p ${SASPGPOOLOIDDIR}
    chown ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASPGPOOLOIDDIR}
fi

# Load the postgresql configuration into Consul
create_and_load_bulk_consul_file \
    ${SASSERVICENAME} \
    ${PGPOOL_CONFIG_DEFN} \
    ${PGPOOL_CONF_SECTIONS} \
    ${SASPGPOOLCONFIGDIR}/sas_dataserver_pgpool.yml

# Load the postgresql hba configuration into Consul
create_and_load_bulk_consul_file \
    ${SASSERVICENAME} \
    ${PGPOOLHBA_CONFIG_DEFN} \
    "${PGPOOLHBA_CONF_SECTIONS}" \
    ${SASPGPOOLCONFIGDIR}/sas_dataserver_pgpoolhba.yml

# Load the pcp configuration into Consul
create_and_load_bulk_consul_file \
    ${SASSERVICENAME} \
    ${PGPOOLPCP_CONFIG_DEFN} \
    "${PGPOOLPCP_CONF_SECTIONS}" \
    ${SASPGPOOLCONFIGDIR}/sas_dataserver_pcp.yml

echo_line "[pgpool] Unset variables so they cannot be seen from inside the host"
[[ ! -z ${SAS_PCPPWD+x} ]] && unset SAS_PCPPWD

##############################################################################
# Create Consul template files
##############################################################################

# Set up config files
pgpool_ctmpl_file=${SASPGPOOLCONFIGDIR}/pgpool.conf.ctmpl
pgpool_conf_file=${SASPGPOOLCONFIGDIR}/pgpool.conf
pgpool_hba_ctmpl_file=${SASPGPOOLCONFIGDIR}/pool_hba.conf.ctmpl
pgpool_hba_conf_file=${SASPGPOOLCONFIGDIR}/pool_hba.conf
pgpool_pcp_ctmpl_file=${SASPGPOOLCONFIGDIR}/pcp.conf.ctmpl
pgpool_pcp_conf_file=${SASPGPOOLCONFIGDIR}/pcp.conf
pgpool_pcppass_ctmpl_file=${SASPGPOOLCONFIGDIR}/pcppass.ctmpl
pgpool_pcppass_conf_file=${SASPGPOOLCONFIGDIR}/.pcppass

reset_file ${pgpool_ctmpl_file} ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0755

cp -v ${SASHOME}/share/pgpool-II/pgpool.conf.ctmpl ${pgpool_ctmpl_file}

sed -i "s|SASHOME|${SASHOME}|" ${pgpool_ctmpl_file}
sed -i "s|SASPGPOOLRUNDIR|${SASPGPOOLRUNDIR}|" ${pgpool_ctmpl_file}
sed -i "s|SASPGPOOLPIDFILE|${SASPGPOOLPIDFILE}|" ${pgpool_ctmpl_file}
sed -i "s|SASLOGDIR|${SASLOGDIR}|" ${pgpool_ctmpl_file}
sed -i "s|SASSERVICENAME|${SASSERVICENAME}|" ${pgpool_ctmpl_file}
sed -i "s|SASINSTANCE|${SASINSTANCE}|" ${pgpool_ctmpl_file}
sed -i "s|SAS_CURRENT_HOST|${SAS_CURRENT_HOST}|" ${pgpool_ctmpl_file}
sed -i "s|SASPGPOOLOIDDIR|${SASPGPOOLOIDDIR}|" ${pgpool_ctmpl_file}
sed -i "s|SASPGPOOLCONFIGDIR|${SASPGPOOLCONFIGDIR}|" ${pgpool_ctmpl_file}
sed -i "s|SASPOSTGRESREPLUSER|${SASPOSTGRESREPLUSER}|" ${pgpool_ctmpl_file}

cat >> ${pgpool_ctmpl_file} << CFTMPLLOOP
{{define "ssloption" }}
    {{- if eq (keyOrDefault "config/${SASSERVICENAME}/sas.security/network.databaseTraffic.enabled" "not_found") "not_found" -}}
        {{if (keyOrDefault "config/application/sas.security/network.databaseTraffic.enabled" "false" | parseBool) -}}
            ssl = true
        {{- else -}}
            ssl = false
        {{- end -}}
    {{- else -}}
        {{- if (key "config/${SASSERVICENAME}/sas.security/network.databaseTraffic.enabled"| parseBool) -}}
            ssl = true
        {{- else -}}
            ssl = false
        {{- end -}}
    {{- end -}}
{{- end -}}

{{template "ssloption"}} # Added through Consul-template
CFTMPLLOOP

add_range_to_ctmpl \
    ${SASSERVICENAME} \
    ${PGPOOL_CONFIG_DEFN} \
    ${PGPOOL_CONF_SECTIONS} \
    ${pgpool_ctmpl_file}

if [ ! -e ${pgpool_hba_ctmpl_file} ]; then
    cp -v ${SASHOME}/share/pgpool-II/pool_hba.conf.ctmpl ${pgpool_hba_ctmpl_file}
    sed -i "s|SASSERVICENAME|${SASSERVICENAME}|" ${pgpool_hba_ctmpl_file}
fi

if [ ! -e ${pgpool_pcp_ctmpl_file} ]; then
    cp -v ${SASHOME}/share/pgpool-II/pcp.conf.ctmpl ${pgpool_pcp_ctmpl_file}
    sed -i "s|SASSERVICENAME|${SASSERVICENAME}|" ${pgpool_pcp_ctmpl_file}
fi

if [ ! -e ${pgpool_pcppass_ctmpl_file} ]; then
    cp -v ${SASHOME}/share/pgpool-II/pcppass.ctmpl ${pgpool_pcppass_ctmpl_file}
    sed -i "s|SASSERVICENAME|${SASSERVICENAME}|" ${pgpool_pcppass_ctmpl_file}
    sed -i "s|SASINSTANCE|${SASINSTANCE}|" ${pgpool_pcppass_ctmpl_file}
    sed -i "s|SAS_DEFAULT_PGUSER|${SAS_DEFAULT_PGUSER}|" ${pgpool_pcppass_ctmpl_file}
    sed -i "s|SAS_DEFAULT_PGPWD|${SAS_DEFAULT_PGPWD}|" ${pgpool_pcppass_ctmpl_file}
fi

##############################################################################
# Reload the configuration files from consul
##############################################################################

# Call consul template to create user defined file
update_config_from_consul \
    ${pgpool_ctmpl_file} \
    ${pgpool_conf_file} \
    ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0755

update_config_from_consul \
    ${pgpool_hba_ctmpl_file} \
    ${pgpool_hba_conf_file} \
    ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0755

update_config_from_consul \
    ${pgpool_pcp_ctmpl_file} \
    ${pgpool_pcp_conf_file} \
    ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0755

update_config_from_consul \
    ${pgpool_pcppass_ctmpl_file} \
    ${pgpool_pcppass_conf_file} \
    ${SASPGPOOLOWNER} ${SASPGPOOLGROUP} 0400

export PCPPASSFILE=${pgpool_pcppass_conf_file}

###############################################################################
# Pgpool configuration
###############################################################################

# The pool_password file created is used for authentication
echo_line "[pgpool] Create the pool_password file"
if [ ! -f ${SASPGPOOLCONFIGDIR}/pool_passwd ]; then
    ${SASHOME}/bin/pg_md5 -f ${SASPGPOOLCONFIGDIR}/pgpool.conf -m -u ${SAS_DEFAULT_PGUSER} ${SAS_DEFAULT_PGPWD}
    ${SASHOME}/bin/pg_md5 -f ${SASPGPOOLCONFIGDIR}/pgpool.conf -m -u ${SAS_DATAMINING_USER} ${SAS_DATAMINING_PASSWORD}
    if [[ ${SASPOSTGRESREPLICATION} == 'true' ]]; then
        ${SASHOME}/bin/pg_md5 -f ${SASPGPOOLCONFIGDIR}/pgpool.conf -m -u ${SASPOSTGRESREPLUSER} ${SASPOSTGRESREPLPWD}
    fi
    chown ${SASPGPOOLOWNER}:${SASPGPOOLGROUP} ${SASPGPOOLCONFIGDIR}/pool_passwd
fi

###############################################################################
# Run pgpool
###############################################################################

echo_line "[pgpool] Run pgpool as ${SASPGPOOLOWNER}"
su - -c "${SASHOME}/bin/pgpool -n -f ${SASPGPOOLCONFIGDIR}/pgpool.conf -F ${SASPGPOOLCONFIGDIR}/pcp.conf -a ${SASPGPOOLCONFIGDIR}/pool_hba.conf &" ${SASPGPOOLOWNER}

echo_line "[pgpool] Run pgpool node watcher as ${SASPGPOOLOWNER}"
${SASHOME}/libexec/sasdatasvrc/script/node_watcher.sh &
###############################################################################
# Consul registration
###############################################################################

_network_databaseTraffic_enabled=$(${_bootstrap_config} kv read config/${SASSERVICENAME}/sas.security/network.databaseTraffic.enabled)
if [ -z "${_network_databaseTraffic_enabled}" ]; then
    _network_databaseTraffic_enabled=$(${_bootstrap_config} kv read config/application/sas.security/network.databaseTraffic.enabled)
fi

_consul_tags="--tags pgpool:${SASSERVICENAME} --tags pgpool --tags public"
if [ "${_network_databaseTraffic_enabled}" = "true" ] || [ "${_network_databaseTraffic_enabled}" = "TRUE" ] ; then
    _consul_tags="$_consul_tags --tags ssl"
fi

# ${_bootstrap_config} agent service register --json ${JOB_DIR}/consul/service_node_registration.json pgpool
${_bootstrap_config} agent service register \
    --name "${SASSERVICENAME}"  \
    --address "${SAS_CURRENT_HOST}" \
    --port ${SAS_DATASERVER_POOL_COMMON_CONNECTION_PORT} \
    $_consul_tags \
    "${SASSERVICENAME}-${SASINSTANCE}"

${_bootstrap_config} agent check register \
    --service-id "${SASSERVICENAME}-${SASINSTANCE}" \
    --id "${SASSERVICENAME}-${SASINSTANCE}" \
    --name "pgpoolport"  \
    --interval 30s --timeout 5s \
    --tcp "${SAS_CURRENT_HOST}:${SAS_DATASERVER_POOL_COMMON_CONNECTION_PORT}"
#    --script "${SASHOME}/libexec/sasdatasvrc/script/sds_consul_health_check.sh"

