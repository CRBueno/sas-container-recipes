#!/bin/bash

# Exit out if any process returns a non zero return code
set -e

# Enable debugging if SAS_DEBUG is set
[[ -z ${SAS_DEBUG+x} ]] && export SAS_DEBUG=0
if [ ${SAS_DEBUG} -gt 0 ]; then
    set -x
fi

 # if given a command, run that
 if [[ -n "$1" ]]; then
     exec "$@"
 fi

 ###############################################################################
# Variables
###############################################################################

[[ -z ${DEPLOYMENT_NAME+x} ]]   && export DEPLOYMENT_NAME="viya"
[[ -z ${SASSERVICENAME+x} ]]    && export SASSERVICENAME="sas-rabbitmq-server"
[[ -z ${SASSERVICECONTEXT+x} ]] && export SASSERVICECONTEXT=${SASSERVICENAME#sas-}
[[ -z ${SASROOT+x} ]]           && export SASROOT=/opt/sas
[[ -z ${SASDEPLOYID+x} ]]       && export SASDEPLOYID=viya
[[ -z ${SASINSTANCE+x} ]]       && export SASINSTANCE=default
[[ -z ${SASHOME+x} ]]           && export SASHOME=${SASROOT}/${SASDEPLOYID}/home
[[ -z ${SASCONFIG+x} ]]         && export SASCONFIG=${SASROOT}/${SASDEPLOYID}/config
[[ -z ${SASTOKENDIR+x} ]]       && export SASTOKENDIR=${SASCONFIG}/etc/SASSecurityCertificateFramework/tokens/consul/default
[[ -z ${SAS_CURRENT_HOST+x} ]]  && export SAS_CURRENT_HOST=$(hostname -f)

export APP_NAME="{{ role_name }}"

# The following are used in sas-start-functions
servicename=${SASSERVICENAME}
servicecontext=${SASSERVICECONTEXT}

# Set of functions for supporting docker containers
source ${SASHOME}/lib/envesntl/docker-functions

###############################################################################
# Setup Consul
###############################################################################

# Write tokens to disk if needed and echo CONSUL_HTTP_ADDR to file
docker_define_consul_environment

###############################################################################
# Shutdown
###############################################################################

trap docker_shutdown_sas_services SIGTERM
trap docker_shutdown_sas_services SIGINT

###############################################################################
# Run rabbitmq
###############################################################################

docker_run_local_consul

[[ -z ${RABBITMQ_DATA_DIR+x} ]] && export RABBITMQ_DATA_DIR=/rabbitmq/data

docker_create_pid_file

chmod -v 0777 ${DOCKERPIDFILE}

if [[ "${SECURE_CONSUL}" == "true" ]]; then
  copy_token_from_configmap "${VAULT_TOKEN_DIR}" "${APP_NAME}" "${APP_NAME}"
fi

echo_line "Starting ${SASSERVICENAME}..."

${SASHOME}/bin/${SASSERVICENAME} -r ${SASROOT}/${SASDEPLOYID} -m ${RABBITMQ_DATA_DIR} -p ${DOCKERPIDFILE}

# if in k8s, set up HA
if [ $(env|grep KUBERNETES_|wc -l) -gt 0 ]; then
  hostname_index=$(hostname|sed -E 's/^.*-([0-9]+)$/\1/g')
  if [[ $hostname_index -eq 0 ]]; then
    ${SASHOME}/sbin/rabbitmqctl -q set_policy ha-all "^sas\." '{"ha-mode":"all", "ha-sync-mode": "automatic"}'
  else
    hostname_base=$(hostname|sed -E 's/^(.*)-[0-9]+$/\1/g')
    hostname_domain=$(hostname -d)
    ${SASHOME}/sbin/rabbitmqctl stop_app
    ${SASHOME}/sbin/rabbitmqctl join_cluster rabbit@${hostname_base}-0.${hostname_domain}
    ${SASHOME}/sbin/rabbitmqctl start_app
  fi
fi

${SASHOME}/bin/sas-rabbitmq-registration

# Start and continually check the ops-agent process.
${SASHOME}/lib/envesntl/docker-ops-agent &

docker_run_sas_services

###############################################################################
# Keep the container alive until it is killed
###############################################################################

docker_check_sas_services
