#!/bin/bash

set -e

[[ -z ${SAS_DEBUG+x} ]] && export SAS_DEBUG=0
if [ ${SAS_DEBUG} -gt 0 ]; then
    set -x
fi

function echo_line()
{
    line_out="$(date) - $1"
    printf "%s\n" "$line_out"
}

function retrieve_keys_from_configmap()
{
    if [ $# -ne 2 ]; then
        echo_line "[ERROR] : Function retrieve_keys_from_configmap needs two parameters: <configmap name> <target variable name>"
        return 1
    fi

    export KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    export KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    export KUBE_CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

    local result=$2
    local status=-1
    local attempts=0
    local resp=''

    while [ ${status} -ne 0 ]; do
        let "attempts=attempts+1"
        if [ ${attempts} -gt 5 ]; then
            echo_line "[ERROR] : Failed to retrieve from ConfigMap $1 after 5 attempts"
            return 1
        fi

        resp=$(curl -s --cacert $KUBE_CACERT -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/configmaps/$1 | python -c 'import json, sys;content = json.load(sys.stdin);data = content.get("data",{});print " ".join(data.keys())')
        status=$?
    done
    eval $result="'$resp'"
}

function post_key_value_to_configmap()
{
    if [ $# -ne 3 ]; then
        echo_line "[ERROR] : Function post_key_value_to_configmap needs three parameters: <configmap name> <configmap key> <configmap value>"
        return 1
    fi

    export KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    export KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    export KUBE_CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

    TEMP=$(mktemp)
    local status="Failure"
    local attempts=0

    while [ "${status}" == "Failure" ]; do
        let "attempts=attempts+1"
        if [ ${attempts} -gt 5 ]; then
            echo_line "[ERROR] : Failed to post to ConfigMap $1 after 5 attempts"
            return 1
        fi

        curl -s --cacert $KUBE_CACERT -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/configmaps/$1 | python -c 'import json, sys;content = json.load(sys.stdin);data = dict() if content.get("data", "") == "" else content.get("data", "");data["'$2'"] = "'$3'";content["data"] = data;json.dump(content, sys.stdout)'> $TEMP

        status=$(curl -s --cacert $KUBE_CACERT -X PUT -d @$TEMP -H "Authorization: Bearer $KUBE_TOKEN" -H "Content-Type: application/json" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/configmaps/$1 | python -c 'import json, sys;response = json.load(sys.stdin);status = response.get("status", ""); print(status)')
    done
    rm -f $TEMP
}

function remove_key_from_configmap()
{
    if [ $# -ne 2 ]; then
        echo_line "[ERROR] : Function remove_key_from_configmap needs two parameters: <configmap name> <configmap key>"
        return 1
    fi

    export KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    export KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    export KUBE_CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

    TEMP=$(mktemp)
    local status="Failure"
    local attempts=0

    while [ "${status}" == "Failure" ]; do
        let "attempts=attempts+1"
        if [ ${attempts} -gt 5 ]; then
            echo_line "[ERROR] : Failed to post to ConfigMap $1 after 5 attempts"
            return 1
        fi
        curl -s --cacert $KUBE_CACERT -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/configmaps/$1 | python -c 'import json, sys;content = json.load(sys.stdin);data = dict() if content.get("data", "") == "" else content.get("data", "");data.pop("'$2'", None);content["data"] = data;json.dump(content, sys.stdout)' > $TEMP

        status=$(curl -s --cacert $KUBE_CACERT -X PUT -d @$TEMP -H "Authorization: Bearer $KUBE_TOKEN" -H "Content-Type: application/json" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/configmaps/$1 | python -c 'import json, sys;response = json.load(sys.stdin);status = response.get("status", ""); print(status)')
    done
    rm -f $TEMP
}

function post_file_contents_to_configmap()
{
    if [ $# -ne 3 ]; then
        echo_line "Function post_file_to_configmap needs three parameters: <configmap name> <configmap key> <file path>"
        return 1
    fi

    local content=$(cat $3 | base64 -w 0)
    post_key_value_to_configmap "$1" "$2" "$content"
    if [ $? -ne 0 ]; then
        echo_line "[ERROR] : Failed to post file contents to $1"
        return 1
    fi
}

function copy_certs_from_configmap()
{
    if [ $# -ne 1 ]; then
        echo_line "[ERROR] : Function build_truststore_from_configmap needs a parameter: <configmap mount path>"
        return 1
    fi

    for file in $(ls $1/*.crt); do
        local filename="$(basename "$file")"
        echo_line "[INFO]  : Copying ${file} to ${SASCONFIG}/etc/SASSecurityCertificateFramework/cacerts"
        cat "$file" | base64 -di > ${SASCONFIG}/etc/SASSecurityCertificateFramework/cacerts/"$filename"
    done
}

function copy_token_from_configmap()
{
    if [ $# -ne 3 ]; then
       echo_line "[ERROR] : Function copy_token_from_configmap needs three parameters: <configmap mount path> <source name> <target name>"
       return 1
    fi

    mkdir -p /opt/sas/viya/config/etc/SASSecurityCertificateFramework/tokens/"$3"/"${SASINSTANCE}"

    while true; do
        set +e
        stat "$1"/"$2"_vault.token
        copy_stat_rc=$?
        set -e
        if [ $copy_stat_rc -eq 0 ]; then
            break;
        fi
        sleep 5s
    done

    cp --verbose "$1"/"$2"_vault.token /opt/sas/viya/config/etc/SASSecurityCertificateFramework/tokens/"$3"/"${SASINSTANCE}"/vault.token
    chown -R sas:sas /opt/sas/viya/config/etc/SASSecurityCertificateFramework/tokens/"$3"
    chmod 0600 /opt/sas/viya/config/etc/SASSecurityCertificateFramework/tokens/"$3"/"${SASINSTANCE}"/vault.token
}

function write_services_to_configmap()
{
    if [ -n "${SASSERVICES_CONFIGMAP}" ]; then
        echo_line "[INFO]  : Kubernetes ConfigMap detected. Writing services to configmap for token generation"
        if [[ -n ${APP_NAME} ]]; then
            post_key_value_to_configmap "${SASSERVICES_CONFIGMAP}" "${APP_NAME}" "1"
        else
            for service in $(ls -1 /etc/init.d/sas-viya-*); do
                sas_token_name=
                if [ ${service} == '/etc/init.d/sas-viya-all-services' ]; then
                    continue
                fi
                grep_command_line=$(grep "^SASPRODCMD=" $service)
                if [[ -n ${grep_command_line} ]]; then
                    sas_command=$(echo ${grep_command_line##*=} | tr -d '"')
                    executable="${SASHOME}/bin/${sas_command}"
                    if [[ "${sas_command}" == 'appserver.sh' ]]; then
                        executable="${SASHOME}/SASStudio/bin/${sas_command}"
                    fi

                    if [[ -f  ${executable} ]]; then
                        if [[ "${sas_command}" == "sas-runlauncher" ]]; then
                            grep_appname=$(grep "^appname=" ${executable})
                            sas_token_name=$(echo ${grep_appname##*=} | tr -d '"')
                        elif [[ "${sas_command}" == "sas-alert-trackclt" ]]; then
                            sas_token_name=evmcltsv
                        elif [[ "${sas_command}" == "sas-ops-agentsrv" ]]; then
                            sas_token_name=evmsvrops
                        elif [[ "${sas_command}" == "sas-cas.sh" ]]; then
                            sas_token_name=cas
                        elif [[ "${sas_command}" == "sas-consul" ]]; then
                            sas_token_name=consul
                        elif [[ "${sas_command}" == "appserver.sh" ]]; then
                            sas_token_name=programming
                        elif [[ "${sas_command}" == "sas-httpproxy" ]]; then
                            sas_token_name=httpproxy
                        else
                            # has_svc_context=$(grep -P -c "^servicecontext" ${SASHOME}/bin/${sas_command} || true)
                            # if [ $has_svc_context -eq 1 ]; then
                                grep_service_context=$(grep -P "^servicecontext" ${executable} |head -n1|| true)
                                if [[ -n ${grep_service_context} ]]; then
                                    sas_token_name=${grep_service_context##*=}
                                    # sas_token_name=${sas_token_name//\"/}
                                else
                                    continue
                                fi
                        fi
                    fi
                fi
                if [[ -n ${sas_token_name} ]]; then
                    if [[ ${sas_token_name} == "consul" ]]; then
                        post_key_value_to_configmap "${SASSERVICES_CONFIGMAP}" "sas-viya-consul-default" "1"
                    fi
                    post_key_value_to_configmap "${SASSERVICES_CONFIGMAP}" "${sas_token_name}" "1"
                else
                    echo_line "[INFO]  : No copying vault token for $1"
                fi
            done
        fi
    fi
}

function docker_define_consul_environment()
{
    echo_line "Defining the Consul Environment"
    [[ -z ${SASTOKENDIR+x} ]]       && export SASTOKENDIR=${SASCONFIG}/etc/SASSecurityCertificateFramework/tokens/consul/default
    [[ -z ${RUNNING_IN_DOCKER+x} ]] && export RUNNING_IN_DOCKER=true
    [[ -n $SECURE_CONSUL ]] && export SECURE_CONSUL=$(echo $SECURE_CONSUL | tr '[:upper:]' '[:lower:]')

    if [ ! -d "${SASTOKENDIR}" ]; then
      echo ""
      mkdir -vp ${SASTOKENDIR}
      chown -v sas:sas ${SASTOKENDIR}
      chmod -v 0755 ${SASTOKENDIR}
      echo ""
    fi
    if [ ! -d ${CONSUL_DATA_DIR} ]; then
      echo ""
      mkdir -vp ${CONSUL_DATA_DIR}
      chown -v sas:sas ${CONSUL_DATA_DIR}
      chmod -v 0755 ${CONSUL_DATA_DIR}
      echo ""
    fi

    # If CONSUL_TOKENS_MANAGEMENT is passed in, make it so that the client file is not used if the file exists
    if [[ -n "${CONSUL_TOKENS_MANAGEMENT}" ]]; then
      if [[ -e "${SASTOKENDIR}"/management.token ]]; then
        mv "${SASTOKENDIR}"/management.token "${SASTOKENDIR}"/old_management.token
      fi

      echo > "${SASTOKENDIR}"/management.token "$(echo "${CONSUL_TOKENS_MANAGEMENT}")"

      echo ""
      chown -v sas:sas "${SASTOKENDIR}"/management.token
      chmod -v 0640 "${SASTOKENDIR}"/management.token
      echo ""
    fi

    # If CONSUL_TOKENS_CLIENT is passed in, make it so that the client file is not used if the file exists
    if [[ -n "${CONSUL_TOKENS_CLIENT}" ]]; then
      if [[ -e "${SASTOKENDIR}"/client.token ]]; then
        mv "${SASTOKENDIR}"/client.token "${SASTOKENDIR}"/old_client.token
      fi

      echo > "${SASTOKENDIR}"/client.token "$(echo "${CONSUL_TOKENS_CLIENT}")"

      echo ""
      chown -v sas:sas "${SASTOKENDIR}"/client.token
      chmod -v 0640 "${SASTOKENDIR}"/client.token
      echo ""
    fi

    # If CONSUL_TOKENS_ENCRYPTION is passed in, make it so that the encryption file is not used if the file exists
    if [ -n "${CONSUL_TOKENS_ENCRYPTION}" ]; then
      if [ -e "${SASTOKENDIR}"/encryption.token ]; then
        mv "${SASTOKENDIR}"/encryption.token "${SASTOKENDIR}"/old_encryption.token
      fi

      echo > "${SASTOKENDIR}"/encryption.token "$(echo "${CONSUL_TOKENS_ENCRYPTION}")"
      echo ""
      chown -v sas:sas "${SASTOKENDIR}"/encryption.token
      chmod -v 0600 "${SASTOKENDIR}"/encryption.token
      echo ""
    fi

    # Tell the environment where Consul is
    [[ -e "${SASCONFIG}"/consul.conf ]] && rm "${SASCONFIG}"/consul.conf
    if [[ -z ${CONSUL_HTTP_ADDR+x} ]]; then
        if [[ "$SECURE_CONSUL" == "true" ]]; then
            echo_line "CONSUL_HTTP_ADDR is not defined, setting this to https://localhost:8501"
            echo > ${SASCONFIG}/consul.conf "export CONSUL_HTTP_ADDR=https://localhost:8501"
        else
            echo_line "CONSUL_HTTP_ADDR is not defined, setting this to http://localhost:8500"
            echo > ${SASCONFIG}/consul.conf "export CONSUL_HTTP_ADDR=http://localhost:8500"
        fi
        echo "export SSL_CERT_FILE=/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem" >> ${SASCONFIG}/consul.conf
        echo "export CONSUL_CACERT=\$SSL_CERT_FILE" >> "${SASCONFIG}"/consul.conf
        echo "export VAULT_CACERT=\$SSL_CERT_FILE" >> "${SASCONFIG}"/consul.conf
    else
        echo_line "Writing ${CONSUL_HTTP_ADDR} to ${SASCONFIG}/consul.conf"
        echo > ${SASCONFIG}/consul.conf "export CONSUL_HTTP_ADDR=${CONSUL_HTTP_ADDR}"
        echo "export SSL_CERT_FILE=/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem" >> ${SASCONFIG}/consul.conf
        echo "export CONSUL_CACERT=\$SSL_CERT_FILE" >> "${SASCONFIG}"/consul.conf
        echo "export VAULT_CACERT=\$SSL_CERT_FILE" >> "${SASCONFIG}"/consul.conf
    fi

    if [[ -n ${SAS_ANCHORS_DIR} ]] && [[ "${CONSUL_SERVER_FLAG}" != "true" ]]; then
        while true; do
            # Make sure that the vault-ca.crt is present
            set +e
            stat ${SAS_ANCHORS_DIR}/vault-ca.crt
            stat_rc=$?
            set -e
            if (( $stat_rc == 0 )); then
                copy_certs_from_configmap "${SAS_ANCHORS_DIR}"
                echo_line "[INFO]  : Running sas-merge-certificates.sh"
                ${SASHOME}/SASSecurityCertificateFramework/bin/sas-merge-certificates.sh ${SASHOME} ${SASCONFIG}
                break;
            else
                echo_line "[INFO]  : Waiting for ${SAS_ANCHORS_DIR}/vault-ca.crt"
                sleep 30
            fi
        done
    fi

    if [[ "${SECURE_CONSUL}" == "true" ]]; then 
        write_services_to_configmap
    fi

    if [[ "${SECURE_CONSUL}" == "true" ]] && [[ "${CONSUL_SERVER_FLAG}" != "true" ]]; then
        echo_line "Kubernetes ConfigMap detected. Copying vault token from mounted location ${VAULT_TOKEN_DIR}"

        # If CONSUL_SERVER_FLAG != true
        local sas_instance=${SASINSTANCE}
        [[ -z ${sas_instance} ]] && export SASINSTANCE="default"
        set +e
        copy_token_from_configmap "${VAULT_TOKEN_DIR}" "${DEPLOYMENT_NAME}-consul-${SASINSTANCE}" "localconsul"
        copy_localconsul_rc=$?
        copy_token_from_configmap "${VAULT_TOKEN_DIR}" "${DEPLOYMENT_NAME}-consul-${SASINSTANCE}" "consul"
        copy_consul_rc=$?
        set -e
        if [ ${copy_localconsul_rc} -ne 0 ] || [ ${copy_consul_rc} -ne 0 ]; then
            echo_line "[ERROR] : Failed to copy consul vault token from ${VAULT_TOKEN_DIR}"
            return 1
        fi
        echo_line "[INFO]  : Successfully copied consul vault token from ${VAULT_TOKEN_DIR}"
        echo_line "[INFO]  : Running localconsul_generate_vault_cert.sh"
        ${SASHOME}/bin/localconsul_generate_vault_cert.sh
        export SASINSTANCE=$sas_instance
    fi

    # Store the instance
    _tmpinstance=${SASINSTANCE}

    # Need to export "default" as the instance value to be picked up by the sas-start-functions
    export SASINSTANCE=default

    # Source the file which contains the Consul functions
    source ${SASHOME}/lib/envesntl/sas-start-functions

    echo_line "Setup service execution environment"
    sas_set_service_env

    echo_line "Setup access to Consul and Vault"
    set +e
    sas_set_consul_vault
    set -e

    echo_line "Setup command options for consul-template"
    sas_setup_consul_template

    # Reset the instance to what was set for the container
    export SASINSTANCE=${_tmpinstance}
}

function docker_wait_for_consul_leader()
{
    echo_line "Wait for the Consul Leader"

    # Handle consul containers
    if [[ "$SASSERVICENAME" =~ consul ]]; then
        [[ -z ${CONSUL_SERVER_FLAG+x} ]] && export CONSUL_SERVER_FLAG=false

        if [ $CONSUL_SERVER_FLAG == "false" ]; then
            if [ ${USE_CONSUL_AGENT} -eq 1 ]; then
                until echo "" | nc 0.0.0.0 8500 2>/dev/null; do
                    echo_line "Waiting for local Consul Agent.."
                    sleep 2
                done

                echo_line "Local Consul Agent running.."
            fi
        fi

        echo_line "Check to see if the Consul leader is ready"
        consul_leader=$(${SASHOME}/bin/sas-bootstrap-config status leader --wait 2>/dev/null)

        if [ $? -ne 0 ]; then
            echo_line "Consul leader not found so exiting"
            exit 1
        else
            echo_line "Consul leader is ${consul_leader}"
        fi
    else
        # Handle non-consul containers
        source ${SASCONFIG}/consul.conf
        echo_line "Check to see if the Consul leader is ready"
        while true; do
            set +e
            consul_leader=$(${SASHOME}/bin/sas-bootstrap-config status leader)
            set -e
            echo_line "[INFO]  : sas-bootstrap-config reports the consul leader to be: ${consul_leader}"
            if [[ -n "${consul_leader}" ]]; then
                break
            fi
        done
    fi
}

function docker_create_pid_file()
{
    echo_line "Create the PID directory and file"

    [[ -z ${SASPIDROOT+x} ]]  && export SASPIDROOT="/var/run/sas"

    _pidfile="${SASPIDROOT}/${SASSERVICECONTEXT}.pid"

    if [ ! -d ${SASPIDROOT} ]; then
      echo ""
      mkdir -vp ${SASPIDROOT}
      echo ""
    fi

    if [ ! -e "${_pidfile}" ]; then
      touch "${_pidfile}"
    fi

    echo ""
    chmod -v 0777 ${SASPIDROOT}
    chmod -v 0777 "${_pidfile}"
    echo ""

    export DOCKERPIDFILE=${_pidfile}
}

function docker_run_local_consul()
{
    # Store the instance
    _tmpinstance=${SASINSTANCE}

    # Need to export "default" as the instance value to be picked up by the sas-start-functions
    export SASINSTANCE=default

    local viya_process="/etc/init.d/sas-${SASDEPLOYID}-consul-${SASINSTANCE}"
    if [ -f "${viya_process}" ] && \
       [ -e ${SASTOKENDIR}/client.token ]; then

        # start local consul
        ${viya_process} start

        # Wait for Consul to be up
        docker_wait_for_consul_leader

        [[ -z ${SAS_LOCAL_CONSUL_PAUSE+x} ]] && SAS_LOCAL_CONSUL_PAUSE=5
        sleep ${SAS_LOCAL_CONSUL_PAUSE}
    fi

    # Reset the instance to what was set for the container
    export SASINSTANCE=${_tmpinstance}
}

function copy_vault_token_for_sas_service()
{
    if [ $# -ne 1 ]; then
        echo_line "[ERROR] : Function copy_vault_token_for_sas_service needs a parameter: <sas service>"
        return 1
    fi

    if [ -n "${VAULT_TOKEN_DIR}" ]; then
        echo_line "[INFO]  : Kubernetes ConfigMap detected. Copying vault token from mounted location ${VAULT_TOKEN_DIR}"
        echo_line "[INFO]  : Copy vault token for $1"
        sas_token_name=
        set +e
        grep_command_line=$(grep "^SASPRODCMD=" $1)
        set -e
        echo_line "[INFO]  : SASPRODCMD = ${grep_command_line}"
        if [[ -n ${grep_command_line} ]]; then
            set +e
            sas_command=$(echo ${grep_command_line##*=} | tr -d '"')
            set -e
            executable="${SASHOME}/bin/${sas_command}"
            if [[ "${sas_command}" == 'appserver.sh' ]]; then
                executable="${SASHOME}/SASStudio/bin/${sas_command}"
            fi

            if [[ -f  ${executable} ]]; then
                set +e
                grep_service_context=$(grep -m 1 "^servicecontext=" ${executable})
                set -e
                if [[ -n ${grep_service_context} ]]; then
                    sas_token_name=${grep_service_context##*=}
                elif [[ "${sas_command}" == "sas-runlauncher" ]]; then
                    grep_appname=$(grep "^appname=" ${executable})
                    sas_token_name=$(echo ${grep_appname##*=} | tr -d '"')
                elif [[ "${sas_command}" == "sas-alert-trackclt" ]]; then
                    sas_token_name=evmcltsv
                elif [[ "${sas_command}" == "sas-ops-agentsrv" ]]; then
                    sas_token_name=evmsvrops
                elif [[ "${sas_command}" == "sas-cas.sh" ]]; then
                    sas_token_name=cas
                elif [[ "${sas_command}" == "appserver.sh" ]]; then
                    sas_token_name=programming
                elif [[ "${sas_command}" == "sas-httpproxy" ]]; then
                    sas_token_name=httpproxy
                fi
            fi
            echo_line "[INFO]  : token name = ${sas_token_name}"
        fi
        if [[ -n ${APP_NAME} ]] && [[ -n ${sas_token_name} ]]; then
            echo_line "[INFO]  : Using APP_NAME value of '${APP_NAME}' to get tokens for SAS services"
            copy_token_from_configmap "${VAULT_TOKEN_DIR}" "${APP_NAME,,}" "${sas_token_name}"
        elif [[ -n ${sas_token_name} ]]; then
            echo_line "[INFO]  : Using token value of '${sas_token_name}' to get tokens for specific SAS service"
            copy_token_from_configmap "${VAULT_TOKEN_DIR}" "${sas_token_name}" "${sas_token_name}"
        else
            echo_line "[INFO]  : No copying vault token for $1"
        fi
    fi
}

function docker_run_sas_services()
{
    if [ -f "${SASHOME}/bin/sasgpud_setup" ]; then
        ${SASHOME}/bin/sasgpud_setup
        gpusetup_rc=$?

        if (( ${gpusetup_rc} == 0 )); then
            set +e
            grep -q "^sas-${SASDEPLOYID}-sasgpud-${SASINSTANCE}" ${SASCONFIG}/etc/${SASDEPLOYID}-svc-mgr/svc-ignore
            disabled=$?
            set -e
            if (( ${disabled} != 0 )); then
                /etc/init.d/sas-${SASDEPLOYID}-sasgpud-${SASINSTANCE} start
            fi
        fi
    fi

    for viya_process in $(ls -1 /etc/init.d/sas-${SASDEPLOYID}-*); do
        echo ${viya_process}
        if [[ "${viya_process}" != *"sas-${SASDEPLOYID}-all-services" ]] &&
           [[ "${viya_process}" != *"sasgpud"* ]] &&
           [[ "${viya_process}" != *"sas-${SASDEPLOYID}-vault"* ]] &&
           [[ "${viya_process}" != *"sas-${SASDEPLOYID}-ops-agent-"* ]]; then
            if [[ $SECURE_CONSUL == "true" ]]; then
              copy_vault_token_for_sas_service "${viya_process}"
            fi
            echo_line "[INFO]  : Starting ${viya_process}"
            ${viya_process} start
        fi
    done

    # Pausing long enough to allow the services to get far enough in the start
    # process to generate a pid file as well as a log file.
    [[ -z ${SAS_PID_PAUSE+x} ]] && SAS_PID_PAUSE=5
    sleep ${SAS_PID_PAUSE}

    if ${SAS_LOGS_TO_STDOUT}; then
        for logdir in $(ls -1 "/var/log/sas/${SASDEPLOYID}"); do
            if [ "${logdir}" != "all-services" ]; then
                logfile=$(ls -1r "/var/log/sas/${SASDEPLOYID}/${logdir}/${SASINSTANCE}/" | head -n 1 )
                if [ -f "/var/log/sas/${SASDEPLOYID}/${logdir}/${SASINSTANCE}/${logfile}" ]; then
                    tail -f --verbose "/var/log/sas/${SASDEPLOYID}/${logdir}/${SASINSTANCE}/${logfile}" |
                        awk '/^==> / {a=substr($0, 5, length-8); next}
                                     {print a":"$0}' &
                fi
            fi
        done
    fi
}

function docker_shutdown_sas_services()
{
    echo
    echo_line "Shutting down SAS services"
    echo

    for viya_process in $(ls -1 /etc/init.d/sas-${SASDEPLOYID}-*); do
        echo ${viya_process}
        if [[ "${viya_process}" != *"sas-${SASDEPLOYID}-all-services" ]] &&
           [[ "${viya_process}" != *"sas-${SASDEPLOYID}-vault"* ]] &&
           [[ "${viya_process}" != *"sas-${SASDEPLOYID}-consul-"* ]]; then
            echo "[INFO]  : Stopping ${viya_process}"
            ${viya_process} stop &
        fi
    done

    # Pause to give the services a moment to stop
    sleep 5

    if [[ ${SAS_LOGS_TO_STDOUT} == "true" ]]; then
        # Kill log tailing
        pkill -9 tail
    fi

    if [ -f "/etc/init.d/sas-viya-consul-default" ]; then
        echo_line "Stop local consul"
	${SASHOME}/bin/consul leave -token=$(cat ${SASCONFIG}/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token) && sleep 5
        /etc/init.d/sas-${SASDEPLOYID}-consul-${SASINSTANCE} stop
    fi

    exit 0
}

###############################################################################
# Keep the container alive until it is killed
###############################################################################
function docker_check_process()
{
    max_failures=5
    failures=0
    while :; do
      if [ -f ${DOCKERPIDFILE} ]; then
        SERVICE_PID=$(cat ${DOCKERPIDFILE})
        set +e
        ps -p ${SERVICE_PID} |grep -q ${SERVICE_PID} 2>/dev/null
        process_check_rc=$?
        set -e
        if (( ${process_check_rc} != 0 )); then
          echo_line "Process is not running... PID = ${SERVICE_PID}"
          failures=$[failures+1]
          if [ ${failures} -eq ${max_failures} ];then
            docker_shutdown_sas_services
          fi
        else
          failures=0
        fi
      else
        echo_line "PID file not found"
        failures=$[failures+1]
        if [ ${failures} -eq ${max_failures} ];then
            docker_shutdown_sas_services
        fi
      fi
      sleep 15
    done
}

function docker_check_sas_services()
{
    set +e
    grep -q "^sas-${SASDEPLOYID}-sasgpud-${SASINSTANCE}" ${SASCONFIG}/etc/${SASDEPLOYID}-svc-mgr/svc-ignore
    gpudisabled=$?
    set -e

    while :; do
        sleep 3
        for viya_process in $(ls -1 /etc/init.d/sas-${SASDEPLOYID}-*); do
            viya_service_status_rc=0
            if [[ "${viya_process}" == *"sas-${SASDEPLOYID}-sasgpud-" ]] &&
               (( ${gpudisabled} != 0 )); then
                set +e
                /etc/init.d/sas-${SASDEPLOYID}-sasgpud-${SASINSTANCE} status >/dev/null
                viya_service_status_rc=$?
                set -e
            elif [[ "${viya_process}" != *"sas-${SASDEPLOYID}-all-services" ]] &&
               [[ "${viya_process}" != *"sas-${SASDEPLOYID}-httpproxy-"* ]] &&
               [[ "${viya_process}" != *"sas-${SASDEPLOYID}-sasgpud-"* ]] &&
               [[ "${viya_process}" != *"sas-${SASDEPLOYID}-vault"* ]] &&
               [[ "${viya_process}" != *"sas-${SASDEPLOYID}-ops-agent-"* ]]; then
                set +e
                ${viya_process} status >/dev/null
                viya_service_status_rc=$?
                set -e
            fi
            if (( ${viya_service_status_rc} != 0 )); then
                echo;
                echo "[ERROR] : ${viya_process} is not running..."
                echo "[ERROR] : Shutting down container";
                docker_shutdown_sas_services
            fi
        done
    done
}

###############################################################################
# Write environment variables to a config for use by scripts.
# File needs to be written to an area that does not need to know some ENV
# for its location.
###############################################################################
function save_env()
{
    # config file saved to /opt/sas/config/SVC-env.sh
    # /opt/sas/config/pgpool-env.sh

    _svc=$1
    _key=$2

    if [ ! -d /opt/sas/config ];then
        mkdir /opt/sas/config
    fi

    _cfg_file=/opt/sas/config/${_svc}-env.sh
    echo "export ${_key}=$(eval echo \$${_key})" >> ${_cfg_file}
}

###############################################################################
# Use consul-template to update a configuration file, once.
###############################################################################
function update_config_from_consul {
    ctmplfile=$1
    targetfile=$2
    fileuser=$3
    filegroup=$4
    fileperms=$5

    ### This probably should move to the start process.
    # generate the needed configuration files
    echo_line "Generate config files using consul-template"
    # TODO: export the environment options
    ${SASHOME}/bin/consul-template ${CONSUL_TEMPLATE_OPTIONS} \
       -template="${ctmplfile}:${targetfile}" -once -log-level=debug

    chmod -v ${fileperms} ${targetfile}
    chown -v ${fileuser}:${filegroup} ${targetfile}
}
