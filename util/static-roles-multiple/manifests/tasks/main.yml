---
- name: Create the deployment directory {{ SAS_MANIFEST_DIR }} to place kubernetes manifests in
  file:
    path: "{{ playbook_dir + '/' + item }}"
    state: directory
  with_items:
  - "{{ SAS_MANIFEST_DIR }}"

# The order of the creation of the directory is important as the top level script
# is going to show the list by creation date.
- name: Create directories for Kubernetes types
  file:
    path: "{{ playbook_dir + '/' + SAS_MANIFEST_DIR + '/' + item }}"
    state: directory
  with_items:
  - "kubernetes"
  - "kubernetes/namespace"
  - "kubernetes/ingress"

- name: Create directories for Kubernetes types
  file:
    path: "{{ playbook_dir + '/' + SAS_MANIFEST_DIR + '/' + item }}"
    state: directory
  with_items:
  - "kubernetes/configmaps"
  - "kubernetes/secrets"
  - "kubernetes/services"
  - "kubernetes/deployments"

- name: Create k8s namespace
  template:
    src: "k8s_namespace.j2"
    dest: "{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/namespace/{{ SAS_K8S_NAMESPACE }}.yml"
  run_once: true

- name: Create k8s Ingress configuration
  template:
    src: "k8s_ingress.j2"
    dest: "{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/ingress/{{ SAS_K8S_NAMESPACE }}.yml"
  run_once: true

- name: Create k8s configmaps
  template:
    src: "k8s_configmap.j2"
    dest: "{% if item.key == 'sas-casserver-primary' %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/configmaps/cas.yml{% else %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/configmaps/{{ item.key }}.yml{% endif %}"
  when: (item.value.environment is defined and item.value.environment) or (custom_services is defined and custom_services and item.key in custom_services.items() | string)
  with_dict: '{{ services }}'

- name: Create k8s secrets
  template:
    src: "k8s_secrets.j2"
    dest: "{% if item.key == 'sas-casserver-primary' %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/secrets/cas.yml{% else %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/secrets/{{ item.key }}.yml{% endif %}"
  when: item.value.secrets is defined and item.value.secrets
  with_dict: '{{ services }}'

- name: Create pets k8s services
  template:
    src: "k8s_services.j2"
    dest: "{% if item.key == 'sas-casserver-primary' %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/services/cas.yml{% else %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/services/{{ item.key }}.yml{% endif %}"
  when: item.key in 'httpproxy, programming, sas-casserver-primary'
  with_dict: '{{ services }}'

- name: Create pets k8s manifest
  template:
    src: "pets_k8s.j2"
    dest: "{% if item.key == 'sas-casserver-primary' %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/deployments/cas.yml{% else %}{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/deployments/{{ item.key }}.yml{% endif %}"
  when: item.key in 'httpproxy, pgpoolc, programming, rabbitmq, sas-casserver-primary, sasdatasvrc'
  with_dict: '{{ services }}'

- name: Create CAS worker manifest
  template:
    src: "casworker_k8s.j2"
    dest: "{{ playbook_dir }}/{{ SAS_MANIFEST_DIR }}/kubernetes/deployments/cas-worker.yml"
  when: item.key in 'sas-casserver-primary'
  with_dict: '{{ services }}'
